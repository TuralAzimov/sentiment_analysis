# -*- coding: utf-8 -*-
"""NLP_Duygu_Analizi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L7X_92j51a_jSNTxsn9t9ZEUdDF8Mf6Z
"""

from sklearn.metrics._plot.confusion_matrix import ConfusionMatrixDisplay
import pandas as pd
import numpy as np
import re
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import style
style.use('ggplot')
from textblob import TextBlob
from nltk.tokenize import word_tokenize
from nltk.stem import PorterStemmer
from nltk.corpus import stopwords
import nltk
nltk.download('stopwords')
stop_words = set(stopwords.words('english'))
from wordcloud import WordCloud
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, ConfusionMatrixDisplay
nltk.download('punkt')

import warnings
warnings.filterwarnings('ignore')

"""#Verilerin Yüklenmesi"""

df = pd.read_csv('vaccination_tweets.csv')

df.head()

"""
#Verilerin Temizlenmesi"""

df.columns

text_df = df.drop(['id', 'user_name', 'user_location', 'user_description', 'user_created',
       'user_followers', 'user_friends', 'user_favourites', 'user_verified',
       'date',  'hashtags', 'source', 'retweets', 'favorites',
       'is_retweet'], axis=1)
text_df.head

"""
#RegEx Kullanarak Metin Temizliği"""

def data_processing(text):
  text=text.lower()
  text = re.sub(r"https\S+|www\S+https\S+",'',text, flags=re.MULTILINE)
  text = re.sub(r'\@w+|\#','',text) 
  text = re.sub(r'[^\w\s]','',text)
  text_tokens = word_tokenize(text)
  filtered_text = [w for w in text_tokens if not w in stop_words]
  return " ".join(filtered_text)

text_df.text = text_df['text'].apply(data_processing)

text_df = text_df.drop_duplicates('text')

"""
#Kelimeleri Köke İndirgeme"""

stemmer = PorterStemmer()
def stemming(data):
  text = [stemmer.stem(word) for word in data]
  return data

text_df['text'] = text_df['text'].apply(lambda x: stemming(x))

text_df.head()

text_df.info()

"""
#Polarize 
Negatiften pozitife (-1:1) arası , 
0 da nötr olmakla"""

def polarity(text):
  return TextBlob(text).sentiment.polarity

text_df['polarity'] = text_df['text'].apply(polarity)

text_df.head(10)

"""
#Duygu Tanımlaması"""

def sentiment(label):
  if label < 0:
    return "Negatif"
  elif label == 0:
    return "Nötr"
  elif label > 0:
    return "Pozitif"

text_df['sentiment'] = text_df['polarity'].apply(sentiment)

text_df.head()

"""
#Eğitme ve Test Amaçlı Datasetin İkiye Ayrılması"""

vect = CountVectorizer(ngram_range=(1,2)).fit(text_df['text'])

X = text_df['text']
Y = text_df['sentiment']
X = vect.transform(X)

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2,random_state=42)

print("x_train boyutu:", (x_train.shape))
print("y_train boyutu:", (y_train.shape))
print("x_test boyutu:", (x_test.shape))
print("y_test boyutu:", (y_test.shape))

"""
#Logistic Regression"""

logreg = LogisticRegression()
logreg.fit(x_train, y_train)
logreg_pred= logreg.predict(x_test)
logreg_acc = accuracy_score(logreg_pred, y_test)
print("Test kesinliği: {:.2f}%".format(logreg_acc*100))

print(confusion_matrix(y_test, logreg_pred))
print( "\n" )
print(classification_report(y_test, logreg_pred))

"""
#Support Vector Machines (SVC)"""

from sklearn.svm import LinearSVC

SVCmodel = LinearSVC()
SVCmodel.fit(x_train, y_train)

svc_pred = SVCmodel.predict(x_test)
svc_acc = accuracy_score(svc_pred, y_test)
print ("Test Kesinliği: {:.2f}%".format(svc_acc*100))

print(confusion_matrix(y_test, svc_pred))
print( "\n" )
print(classification_report(y_test, svc_pred))

"""
# Random Forest  """

from sklearn.ensemble import RandomForestClassifier
RFCmodel = RandomForestClassifier()
RFCmodel.fit(x_train,y_train)

rfc_pred = RFCmodel.predict(x_test)
rfc_acc = accuracy_score(rfc_pred, y_test)
print ("Test Kesinliği: {:.2f}%".format(rfc_acc*100))

print(confusion_matrix(y_test, rfc_pred))
print( "\n" )
print(classification_report(y_test, rfc_pred))

"""
# K- Nearest Algorithm"""

from sklearn.neighbors import KNeighborsClassifier
Knearest = KNeighborsClassifier(n_neighbors=3)
Knearest.fit(x_train, y_train)

Knear_pred =Knearest.predict(x_test)
Knear_acc = accuracy_score(Knear_pred, y_test)
print ("Test Kesinliği: {:.2f}%".format(Knear_acc*100))

print(confusion_matrix(y_test, Knear_pred))
print( "\n" )
print(classification_report(y_test, Knear_pred))

text_df.head(100)